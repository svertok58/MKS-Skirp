
[gcode_macro INPUT_SHAPER]
description: Measure X and Y axis resonances
gcode:
  G90
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  SHAPER_CALIBRATE
  M84


[gcode_macro INPUT_SHAPER_GRAPHS]
description: Generate Input Shaper Graphs
gcode:
  {% set x_png = params.X_PNG|default("/home/mks/printer_data/config/resonances_x.png") %}
  {% set y_png = params.Y_PNG|default("/home/mks/printer_data/config/resonances_y.png") %}

  {% if "xyz" not in printer.toolhead.homed_axes %}
  G28  # home all axis
  {% endif %}

  # The different name means that guppy does not try to also generate graphs
  TEST_RESONANCES AXIS=X NAME=a
  M400

  # The different name means that guppy does not try to also generate graphs
  TEST_RESONANCES AXIS=Y NAME=b
  M400

  RUN_SHELL_COMMAND CMD=calibrate_shaper PARAMS="/tmp/resonances_x_a.csv -o {x_png}"
  RUN_SHELL_COMMAND CMD=calibrate_shaper PARAMS="/tmp/resonances_y_b.csv -o {y_png}"


[gcode_macro LOAD_MESH_TEMP]
description: Load or generate a mesh
gcode:
    #### set defaults ####
    {% set bed_temperature = params.BED_TEMPERATURE|default(0) %}
    {% set force = params.FORCE|default(0) %}
    #### end off definition  ####
    {action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
    {% if bed_temperature|int < 30 %}
        {action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
    {% else %}
        {% if printer.configfile.config["bed_mesh " + bed_temperature] is defined and force|int == 0 %}
            BED_MESH_PROFILE LOAD={bed_temperature}
            G28 Z #because Z-Tilt #remove line if you ran G28 before starting this macro
            {action_respond_info("Succesfully loaded bed_mesh "+ bed_temperature)}
        {% else %}
            {% if printer.configfile.config["bed_mesh " + bed_temperature] is defined and force|int == 1 %}
                BED_MESH_PROFILE REMOVE={bed_temperature}
            {% endif %}
            {action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
            {action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ bed_temperature)}
            ADD_BED_MESH TARGET_TEMP={bed_temperature}
        {% endif %}
    {% endif %}

[gcode_macro ADD_BED_MESH]
description: Generate a mesh and prepare for SAVE_CONFIG
gcode:
    #### set defaults ####
    {% set target_temp = params.TARGET_TEMP|default(30) %}
    #### end off definition  ####
    M190 S{target_temp} # Wait for the bed to hit target_temp
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={target_temp}
    BED_MESH_PROFILE REMOVE=default

[gcode_macro PREHEATANDMESH]
description: Preheat for mesh
gcode:
    #### set defaults ####
    {% set t_extruder = params.T_EXTRUDER|default(0) %}
    {% set t_bed = params.T_BED|default(0) %}
    #### end off definition  ####
    M104 S{t_extruder}
    M190 S{t_bed}
    G28
    M109 S{t_extruder}
    LOAD_MESH_TEMP BED_TEMPERATURE={t_bed}
    G28
    
[gcode_macro PREHEAT60]
description: Preheat bed 60C extruder 140C
gcode:
  PREHEATANDMESH T_BED=60 T_EXTRUDER=140

[gcode_macro PREHEAT_75]
description: Preheat bed 75C extruder 140C
gcode:
  PREHEATANDMESH T_BED=75 T_EXTRUDER=140

[gcode_macro pause]
description: Pauses the current print.
  Usage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]
rename_existing: _KM_PAUSE_BASE
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  # Retract length (negative)
  {% set E = (params.E|default(5))|float %}
  # Beeps
  {% set B = (params.B|default(10))|float %}

  {% if printer.virtual_sdcard.is_active %}
    {% set position = printer.gcode_move.gcode_position %}
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"
    SAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE
    _KM_PAUSE_BASE
    M83
    G1 E{'%.4f' % -E} F{km.load_speed}
    PARK P=2{% for k in params|select("in", "XYZ") %}
      {' '~k~'="'~params[k]~'"'}
    {% endfor %}
    # Beep on pause if there's an M300 macro.
    {% if "output_pin beeper" in printer %}
      {% for i in range(B|int) %}
        M300 P100
        G4 P200
      {% endfor %}
    {% endif %}
  {% else %}
    { action_respond_info("Print from SD card is not in progress.") }
  {% endif %}

[gcode_macro m600]
description: Pauses the current print.
  Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
              [Z<pos>]
gcode:
  PAUSE P=2{% for k in params|select("in", "BEXYZ") %}{
      ' '~k~'="'~params[k]~'"'}{% endfor %}
  UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif %}
  {% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro m601]
description: Pauses the current print.
  Usage: M601
gcode:
  PAUSE

[gcode_macro m602]
description: Resumes the currently paused print.
  Usage: M602
gcode:
  RESUME

[gcode_macro m24]
rename_existing: M24.6245197
gcode:
  {% if printer.pause_resume.is_paused %}
  RESUME
  {% else %}
  M24.6245197
  {% endif %}

[gcode_macro m25]
rename_existing: M25.6245197
gcode:
  PAUSE

[gcode_macro resume]
description: Resumes the currently paused print.
  Usage: RESUME [E<pos>]
rename_existing: _KM_RESUME_BASE
variable_saved_extruder_temp: 0
variable_saved_x: 0.0
variable_saved_y: 0.0
variable_saved_z: 0.0
variable_saved_e: 0.0
gcode:
  {% if printer.pause_resume.is_paused %}
    {% set km = printer["gcode_macro _km_globals"] %}
    # Warm the extruder back up if needed.
    {% set extruder = printer[printer.toolhead.extruder] %}
    {% if extruder.target <= printer.configfile.settings[
                               printer.toolhead.extruder].min_temp
                             | float + 0.5 %}
      M109 S{saved_extruder_temp}
    {% endif %}

    # If there's no saved_e assume we're completing a filament change and
    # retract enough to avoid drooling on the model.
    {% if 'E' not in params and not saved_e %}
      {% set saved_e = 5.0 %}
      G1 E{'%.4f' % -saved_e } F{km.load_speed}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
    G90
    # Move back to last position before unretracting.
    G0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}
    G0 Z{saved_z} F{km.travel_speed_z}
    G91
    # Unretract
    G1 E{'%.4f' % (params.E|default(saved_e))} F{km.load_speed}
    RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1
    _KM_RESUME_BASE
  {% else %}
    { action_respond_info("Printer is not paused.") }
  {% endif %}

[gcode_macro cancel_print]
description: Cancels the current print.
  Usage: CANCEL_PRINT
rename_existing: _KM_CANCEL_PRINT_BASE
gcode:
  {% set was_paused = printer.pause_resume.is_paused %}
  {% if was_paused or printer.idle_timeout.state|string == "Printing" %}
    PRINT_END
    SDCARD_RESET_FILE
  {% else %}
    { action_respond_info("No print from SD card in progress.") }
  {% endif %}
  _KM_CANCEL_PRINT_BASE
  {% if was_paused %}
    RESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0
  {% endif %}
  CLEAR_PAUSE

[gcode_macro clear_pause]
description: Clears the current pause state.
  Usage: CLEAR_PAUSE
rename_existing: _KM_CLEAR_PAUSE
gcode:
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"
  _KM_CLEAR_PAUSE

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[gcode_macro _check_fan_params]
gcode:
  {% set MAXIMUM = params.MAXIMUM|default(
      printer["gcode_macro set_fan_scaling"].maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(
      printer["gcode_macro set_fan_scaling"].minimum)|int %}

  {% if params.SCALE and params.SCALE|float <= 0 %}
    { action_raise_error("SCALE must be a positive value.") }
  {% elif MINIMUM < 0 or MINIMUM > 255 %}
    { action_raise_error("MINIMUM must be between 0 and 255.") }
  {% elif MAXIMUM < 0 or MAXIMUM > 255 %}
    { action_raise_error("MAXIMUM must be between 0 and 255.") }
  {% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
    { action_raise_error("SPEED must be between 0 and 255.") }
  {% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
    { action_raise_error("BOOST must be between 0 and 255.") }
  {% elif MINIMUM > MAXIMUM %}
    { action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
  {% endif %}

[gcode_macro set_fan_scaling]
description: Sets fan scaling factors applied to M106 command. If a speed is
  provided it will be adjusted according to the scaling parameters.
  Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
                         [MINIMUM=<min>] [SPEED=<speed>]
variable_scale: 1.0
variable_boost: 0
variable_minimum: 0
variable_maximum: 255
variable_real_speed: 0
gcode:
  _CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
  {% set SCALE = params.SCALE|default(scale)|float %}
  {% set BOOST = params.BOOST|default(boost)|float %}
  {% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(minimum)|int %}
  {% set SPEED = params.SPEED|default(real_speed)|int %}

  {% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
    {action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
                         format(SCALE, MINIMUM, MAXIMUM, SPEED))}
  {% endif %}

  # Update parameters on change.
  {% if params|length > 0 %}
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
    # Run fan at adusted speed
    M106 S{SPEED}
  {% endif %}
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0)|int %}
  {% set dummy = params.MAXIMUM|default(255)|int %}
  {% set dummy = params.MINIMUM|default(0)|int %}
  {% set dummy = params.SPEED|default(current speed)|int %}
  " %} # End argument block for Mainsail

[gcode_macro reset_fan_scaling]
description: Clears all fan scaling factors.
  Usage: RESET_FAN_SCALING
gcode:
  SET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0

[gcode_macro m106]
description: Wraps M106 to implement scaling overrides.
rename_existing: M106.6245197
gcode:
  {% set S = params.S|default(255)|int %}
  {% if S > 255 or S < 0 %}
    { action_raise_error("S[%i] out of range.") | format(S) }
  {% endif %}

  {% set scale = printer["gcode_macro set_fan_scaling"] %}
  SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"
  M106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,
                   scale.minimum) | max, scale.maximum) | min}

[gcode_macro PID_CALIBRATE_BED]
description: Bed Pid Calibrate
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET={params.BED_TEMP|default(65)}


[gcode_macro PID_CALIBRATE_HOTEND]
description: Hotend Pid Calibrate
gcode:
  PID_CALIBRATE HEATER=extruder TARGET={params.HOTEND_TEMP|default(230)}

